from aiogram import types, dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import kb_user
from aiogram.types import CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from lib import handler
from handlers.main_menu.constructor import constructor_register


import emoji
import re 

START_TEXT = """
<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç PRACTICE</b>
–ù–∞—á–∏–Ω–∞—è —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, <b>–í–´ –¥–∞–µ—Ç–µ —Å–æ–≥–∞–ª—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - <b>"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"</b>"""

CANCLE_TEXT = """
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - <b>"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"</b>
"""

class ClientStates(StatesGroup):
    fio = State()
    telephone = State()
    date_of_birthday = State()
    education = State()
    profession = State()
    email = State()

async def start_registration(message: types.Message) -> None:
    await bot.send_photo(chat_id=message.from_user.id, 
                        photo='https://i.imgur.com/o7sOfGx.png', 
                        caption=START_TEXT, 
                        parse_mode='HTML', 
                        reply_markup=kb_user.get_keyboard())

# async def choose(message: types.Message) -> None:
#     await message.reply(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", 
#                         reply_markup=kb_user.choose_keyboard())
    
# async def event(message: types.Message) -> None:
#     await message.reply(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", 
#                         reply_markup=kb_user.event_keyboard())

# async def get_event(message: types.Message) -> None:
#     await message.reply(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", 
#                         reply_markup=kb_user.cancle_keyboard())
#     await ClientStates.fio.set()

# async def reg(message: types.Message) -> None:
#     await message.reply(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'", 
#                         reply_markup=kb_user.get_keyboard())

# async def cancle(message: types.Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await message.reply(text=CANCLE_TEXT, reply_markup=kb_user.get_keyboard(), parse_mode='HTML')
#     await state.finish()

# async def get_fio(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:
#         data['fio'] = message.text
#     await ClientStates.next() 
#     await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω', reply_markup=kb_user.cancle_keyboard())

# async def get_telephone(message: types.Message, state: FSMContext) -> None:
#     phone = await handler.is_int_phone(message.text)
#     if phone == True:
#         async with state.proxy() as data:
#             data['telephone'] = message.text
#         await ClientStates.next() 
#         await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n<b>–§–æ—Ä–º–∞—Ç: DD.MM.YYYY</b>', reply_markup=kb_user.cancle_keyboard(), parse_mode='HTML')
#     else:
#         await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')

# async def get_date_of_birthday(message: types.Message, state: FSMContext) -> None:
#     date = await handler.is_valid_date(message.text)
#     if date == True:
#         async with state.proxy() as data:
#             data['date_of_birthday'] = message.text
#         await ClientStates.next() 
#         await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ', reply_markup=kb_user.cancle_keyboard())
#     else:
#         await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.\n<b>–§–æ—Ä–º–∞—Ç: DD.MM.YYYY</b>', reply_markup=kb_user.cancle_keyboard(), parse_mode='HTML')

# async def get_education(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:
#         data['education'] = message.text
#     await ClientStates.next() 
#     await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', reply_markup=kb_user.cancle_keyboard())

# async def get_profession(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:
#         data['profession'] = message.text
#     await ClientStates.next() 
#     await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email.\n<b>–§–æ—Ä–º–∞—Ç: practice@gmail.com</b>', reply_markup=kb_user.cancle_keyboard(), parse_mode='HTML')

# async def get_email(message: types.Message, state: FSMContext) -> None:
#     check = await handler.is_valid_email(message.text)
#     if check == True:
#         async with state.proxy() as data:
#             data['email'] = message.text
#         async with state.proxy() as data:
#             await bot.send_message(chat_id=message.from_user.id,
#                                 text=f"–§–ò–û: {data['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['telephone']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['date_of_birthday']}\n–£—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {data['education']}\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {data['profession']}\n–≠–ª. –ø–æ—á—Ç–∞: {data['email']}")
#         await state.finish()  
#     else:
#         await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.\n<b>–§–æ—Ä–º–∞—Ç: practice@gmail.com</b>', reply_markup=kb_user.cancle_keyboard(), parse_mode='HTML')
#     await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=kb_user.choose_keyboard())


# async def want_to_practice(message: types.Message) -> None:
#     await message.reply(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=kb_user.want_to_team())

# async def alexander(message: types.Message) -> None:
#     await bot.send_photo(chat_id=message.from_user.id, 
#                         photo='https://i.imgur.com/oC9qlF0.jpeg',
#                         caption="–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –¢—Ä–æ—à–∫–∏–Ω—É", 
#                         reply_markup=kb_user.link())    
#     await bot.send_message(chat_id=message.from_user.id, text=emoji.emojize("üëÜ"), reply_markup=kb_user.choose_keyboard())

# async def process_callback_button1(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await bot.send_message(callback_query.from_user.id)

def register_handlers_user(dp: dispatcher):
    dp.register_message_handler(start_registration, commands=["start"])
    constructor_register.register_handlers_new_project(dp)
    
    # dp.register_message_handler(choose, Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
    # dp.register_message_handler(cancle, Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ'), state='*')
    # dp.register_message_handler(event, Text(equals='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
    # dp.register_message_handler(get_event, Text(['–ò–Ω—Ç–µ–Ω—Å–∏–≤ –ü–†–ê–ö–¢–ò–°', '–ö–û–î –ò–ë + –ü–†–ê–ö–¢–ò–°']))
    # dp.register_message_handler(get_fio, state=ClientStates.fio)
    # dp.register_message_handler(get_telephone, state=ClientStates.telephone)
    # dp.register_message_handler(get_date_of_birthday, state=ClientStates.date_of_birthday)
    # dp.register_message_handler(get_education, state=ClientStates.education)
    # dp.register_message_handler(get_profession, state=ClientStates.profession)
    # dp.register_message_handler(get_email, state=ClientStates.email)
    # dp.register_message_handler(want_to_practice, Text(equals='–ß—Ç–æ —Ç–∞–∫–æ–µ PRACTICE?'))
    # dp.register_message_handler(alexander, Text(equals='–•–æ—á—É –≤ –∫–æ–º–∞–Ω–¥—É'))
    # dp.register_callback_query_handler(lambda c: c.data == 'link')
